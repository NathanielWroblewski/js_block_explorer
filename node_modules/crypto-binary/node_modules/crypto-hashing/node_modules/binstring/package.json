{
  "name": "binstring",
  "version": "0.2.0",
  "description": "Convert binary data to and from various string representations",
  "keywords": [
    "string",
    "strings",
    "convert",
    "hex",
    "bytes"
  ],
  "devDependencies": {
    "mocha": "1.*",
    "terst": "0.0.1"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/binstring",
    "type": "git"
  },
  "main": "./lib/binstring.js",
  "readme": "# BinString\n\nJavaScript component to convert to/from strings and byte arrays.\n\nAMD/CommonJS compatible.\n\n\n## Usage\n\nThis library exposes a single function that takes a data parameter and an options object. Set `options.in` and `options.out` to the format of the input and desired output. Possible values include:\n\n* `hex`: Hex-encoded string; two hexadecimal characters per byte\n* `binary`: Binary-encoded string (ASCII-encoded)\n* `utf8`: Binary-encoded string (UTF8-encoded)\n* `bytes`: Byte array; an array of numbers, each representing one byte of data\n* `buffer`: A Node.js native Buffer object\n\nThe default encoding for `options.out` is a buffer (`buffer`). The input format is duck-typed if it's an Array (`bytes`) or Buffer (`buffer`) or Number object. If it's a string, it's interpreted as `binary` unless it's prefixed by `0x` (then it's `hex`). If `options.in` is set, it overrides the automatic duck-typing of the input variable.\n\n```js\nvar conv = require('binstring');\n\nconsole.dir(conv('hello', { in:'binary' })); // No output encoding specified, defaults to Buffer; output: Buffer([104,101,108,108,111])\nconsole.dir(conv([104,101,108,108,111], { out:'hex' })); // No input encoding specified, auto-detected as Byte Array; output: 68656c6c6f\nconsole.dir(conv('hello', { in:'binary', out:'hex' })); // output: 68656c6c6f\n```\n\n## Test\n\nUnit tests are written in [Mocha](http://visionmedia.github.io/mocha/). To run the test suite, checkout the git repository, and from within the base folder run:\n\n```sh\n$ npm install --dev\n$ ./node_modules/mocha/bin/mocha\n```\n\n## References on JavaScript UTF-8 forced encoding\n(these sources are also included as PDFs in the repo in case the links go dead)\n\n- http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n- http://hossa.in/2012/07/20/utf-8-in-javascript.html\n\n# License\n(MIT License)\n\nCopyright 2014, Brooks Boyd <boydb@midnightdesign.ws>",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/binstring/issues"
  },
  "_id": "binstring@0.2.0",
  "_from": "binstring@0.2.x"
}
